{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_breadcrumbs = _resolveComponent(\"v-breadcrumbs\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_BarChart = _resolveComponent(\"BarChart\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_DoughnutChart = _resolveComponent(\"DoughnutChart\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_breadcrumbs, null, {\n    default: _withCtx(() => [_createTextVNode(_toDisplayString($data.currentPath), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\"Bar Chart\"), _createVNode(_component_v_container, null, {\n    default: _withCtx(() => [_createVNode(_component_v_card, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n        default: _withCtx(() => _cache[0] || (_cache[0] = [_createTextVNode(\" The chart with user's completed task count and not completed task count. \")])),\n        _: 1 /* STABLE */\n      }), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.usersList, item => {\n        return _openBlock(), _createElementBlock(\"div\", {\n          key: item.pk\n        }, [item.username == _ctx.$route.params.username ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_BarChart, {\n          completed: item.completed,\n          notCompleted: item.not_completed,\n          username: item.username\n        }, null, 8 /* PROPS */, [\"completed\", \"notCompleted\", \"username\"])])) : _createCommentVNode(\"v-if\", true)]);\n      }), 128 /* KEYED_FRAGMENT */))]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }), _createCommentVNode(\"Doughnut Chart\"), _createVNode(_component_v_container, null, {\n    default: _withCtx(() => [_createVNode(_component_v_card, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n        default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\"The chart with users activity comparatively:\")])),\n        _: 1 /* STABLE */\n      }), $data.usersList ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_DoughnutChart, {\n        usernames: $data.usersList.map(item => item.username),\n        taskSum: $data.usersList.map(item => item.completed + item.not_completed == 0 ? 1 : item.completed + item.not_completed)\n      }, null, 8 /* PROPS */, [\"usernames\", \"taskSum\"])])) : _createCommentVNode(\"v-if\", true)]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["key","_createElementBlock","_Fragment","_createVNode","_component_v_breadcrumbs","default","_withCtx","_createTextVNode","_toDisplayString","$data","currentPath","_","_createCommentVNode","_component_v_container","_component_v_card","_component_v_card_text","_cache","_renderList","usersList","item","pk","username","_ctx","$route","params","_hoisted_1","_component_BarChart","completed","notCompleted","not_completed","_hoisted_2","_component_DoughnutChart","usernames","map","taskSum"],"sources":["/home/sabi/Desktop/ToDo/frontend/todo/src/views/StatisticView.vue"],"sourcesContent":["<template>\n  <v-breadcrumbs>\n    {{ currentPath }}\n  </v-breadcrumbs>\n  <!--Bar Chart-->\n  <v-container>\n    <v-card>\n      <v-card-text>\n        The chart with user's completed task count and not completed task count.\n      </v-card-text>\n      <div v-for=\"item in usersList\" :key=\"item.pk\">\n        <div v-if=\"item.username == $route.params.username\">\n          <BarChart\n            :completed=\"item.completed\"\n            :notCompleted=\"item.not_completed\"\n            :username=\"item.username\"\n          ></BarChart>\n        </div>\n      </div>\n    </v-card>\n  </v-container>\n  <!--Doughnut Chart-->\n  <v-container>\n    <v-card>\n      <v-card-text>The chart with users activity comparatively:</v-card-text>\n      <div v-if=\"usersList\">\n        <DoughnutChart\n          :usernames=\"usersList.map((item) => item.username)\"\n          :taskSum=\"\n            usersList.map((item) =>\n              item.completed + item.not_completed == 0\n                ? 1\n                : item.completed + item.not_completed\n            )\n          \"\n        ></DoughnutChart>\n      </div>\n    </v-card>\n  </v-container>\n</template>\n<script>\nimport axios from \"axios\";\nimport BarChart from \"@/components/BarChart.vue\";\nimport DoughnutChart from \"@/components/DoughnutChart.vue\";\n\nexport default {\n  name: \"StatisticView\",\n  /* Bar Chart is for self user stats and Doughnut is for all users stats */\n  components: {\n    BarChart,\n    DoughnutChart,\n  },\n  data() {\n    return {\n      currentPath: \"\",\n      USERS_LIST_URL: \"http://192.168.1.115:8000/auth/users/all/\",\n      usersList: null,\n      usernames: [],\n      taskSum: [],\n    };\n  },\n  methods: {\n    /* API call that gets users Info (auth is not required: [AllowAny]) */\n    async getUsers() {\n      try {\n        const response = await axios.get(this.USERS_LIST_URL);\n        if (response.status == 200) {\n          const apiData = response.data;\n          this.usersList = apiData;\n          this.usernames = apiData.map((item) => item.username);\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    },\n  },\n  async mounted() {\n    /* Making API call in mounted lifecycle hook */\n    await this.getUsers();\n  },\n  created() {\n    this.currentPath = this.$route.path;\n  },\n};\n</script>\n<style></style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;;;;;;uBAAAC,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAEgBC,wBAAA;IAHlBC,OAAA,EAAAC,QAAA,CAEI,MAAiB,CAFrBC,gBAAA,CAAAC,gBAAA,CAEOC,KAAA,CAAAC,WAAW,iB;IAFlBC,CAAA;MAIEC,mBAAA,aAAgB,EAChBT,YAAA,CAecU,sBAAA;IApBhBR,OAAA,EAAAC,QAAA,CAMI,MAaS,CAbTH,YAAA,CAaSW,iBAAA;MAnBbT,OAAA,EAAAC,QAAA,CAOM,MAEc,CAFdH,YAAA,CAEcY,sBAAA;QATpBV,OAAA,EAAAC,QAAA,CAOmB,MAEbU,MAAA,QAAAA,MAAA,OATNT,gBAAA,CAOmB,4EAEb,E;QATNI,CAAA;6BAUMV,mBAAA,CAQMC,SAAA,QAlBZe,WAAA,CAU0BR,KAAA,CAAAS,SAAS,EAAjBC,IAAI;6BAAhBlB,mBAAA,CAQM;UAR0BD,GAAG,EAAEmB,IAAI,CAACC;YAC7BD,IAAI,CAACE,QAAQ,IAAIC,IAAA,CAAAC,MAAM,CAACC,MAAM,CAACH,QAAQ,I,cAAlDpB,mBAAA,CAMM,OAjBdwB,UAAA,GAYUtB,YAAA,CAIYuB,mBAAA;UAHTC,SAAS,EAAER,IAAI,CAACQ,SAAS;UACzBC,YAAY,EAAET,IAAI,CAACU,aAAa;UAChCR,QAAQ,EAAEF,IAAI,CAACE;gFAf5BT,mBAAA,e;;MAAAD,CAAA;;IAAAA,CAAA;MAqBEC,mBAAA,kBAAqB,EACrBT,YAAA,CAgBcU,sBAAA;IAtChBR,OAAA,EAAAC,QAAA,CAuBI,MAcS,CAdTH,YAAA,CAcSW,iBAAA;MArCbT,OAAA,EAAAC,QAAA,CAwBM,MAAuE,CAAvEH,YAAA,CAAuEY,sBAAA;QAxB7EV,OAAA,EAAAC,QAAA,CAwBmB,MAA4CU,MAAA,QAAAA,MAAA,OAxB/DT,gBAAA,CAwBmB,8CAA4C,E;QAxB/DI,CAAA;UAyBiBF,KAAA,CAAAS,SAAS,I,cAApBjB,mBAAA,CAWM,OApCZ6B,UAAA,GA0BQ3B,YAAA,CASiB4B,wBAAA;QARdC,SAAS,EAAEvB,KAAA,CAAAS,SAAS,CAACe,GAAG,CAAEd,IAAI,IAAKA,IAAI,CAACE,QAAQ;QAChDa,OAAO,EAAezB,KAAA,CAAAS,SAAS,CAACe,GAAG,CAAEd,IAAI,IAAmBA,IAAI,CAACQ,SAAS,GAAGR,IAAI,CAACU,aAAa,Q,IAA4CV,IAAI,CAACQ,SAAS,GAAGR,IAAI,CAACU,a;6DA5B5KjB,mBAAA,e;MAAAD,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}