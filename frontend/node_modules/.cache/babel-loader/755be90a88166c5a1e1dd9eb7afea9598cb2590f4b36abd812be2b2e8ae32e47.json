{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"RegisterView\",\n  data() {\n    return {\n      // Constant variables:\n      REGISTER_URL: \"http://192.168.1.115:8000/auth/register/\",\n      // Dynamic vaiables:\n      showPassword: false,\n      requestLoading: false,\n      username: \"\",\n      password: \"\",\n      isValid: true,\n      // The rules for username, search pattern in RegExp:\n      usernameRules: {\n        required: value => !!value || \"Please, fill the field!\",\n        minLength: value => value.length >= 4 || \"Minimal length of username is 4\",\n        whiteSpace: value => !/\\s/.test(value) || \"The username must be without withespace!\",\n        maxLength: value => value.length <= 20 || \"Maximal length of username is 20\",\n        nonWord: value => !/[^a-zA-Z0-9_]/.test(value) || \"The username must be in Latin letters!\"\n      },\n      // The rules for password, search patter in RegExp:\n      passwordRules: {\n        required: value => !!value || \"Please, fill the field!\",\n        maxLength: value => value.length <= 15 || \"Maximal length of password is 15\",\n        minLength: value => value.length >= 4 || \"Minimal length of username is 4\",\n        numberRequired: value => /\\d/.test(value) || \"Password must contain at least one number\",\n        whiteSpace: value => !/\\s/.test(value) || \"The password must be without withespace!\",\n        upperCase: value => /[A-Z]/.test(value) || \"The password must contain at least one Upper case!\",\n        lowerCase: value => /[a-z]/.test(value) || \"The password must contain at least one lower case!\",\n        nonWord: value => !/[^a-zA-Z0-9_]/.test(value) || \"The password must be in Latin letters!\"\n      },\n      // The username and password creation tips:\n      rulesDescription: \"When you create an account use these standarts to make strong\\\n        username and secure password: number in password, at least one\\\n        upper case letter, at least one lower case letter, no whitespace,\\\n        min length of password must be greater than 4, max length of password\\\n        must be lower than 20, the letters of password must be in Latin.\"\n    };\n  },\n  methods: {\n    // The authentication method that makes post request call to register new user;\n    register() {\n      // Checking if the rules of username and password fields are correct, if correct allow make request\n      if (this.isValid == true) {\n        this.requestLoading = true;\n        try {\n          // Try make post reqeust to REGISTER_URL for user registration\n          axios.post(this.REGISTER_URL, {\n            username: this.username,\n            password: this.password\n          }).then(response => {\n            // Handling the response of API call\n            // If response status code is equal to 201(200) redirect to login page\n            if (response.status == 201 || response.status == 200) {\n              this.requestLoading = false;\n              // redirect the user to the login page\n              this.$router.push(\"/login\");\n            }\n            // If response status code is equal to 226\n            // Show logs that this user already has been registered\n            // Show link of login page in alert dialog\n            if (response.status == 226) {\n              this.requestLoading = false;\n              console.log(response.status);\n            }\n            // If response status code is equal to 400\n            // show logs with that error\n            if (response.status == 400) {\n              this.requestLoading = false;\n              console.log(response.status);\n            }\n          });\n          this.requestLoading = !this.requestLoading;\n        } catch (err) {\n          // In all other cases show alert dialog with err\n          alert(err);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","REGISTER_URL","showPassword","requestLoading","username","password","isValid","usernameRules","required","value","minLength","length","whiteSpace","test","maxLength","nonWord","passwordRules","numberRequired","upperCase","lowerCase","rulesDescription","methods","register","post","then","response","status","$router","push","console","log","err","alert"],"sources":["/home/sabi/Desktop/ToDo/frontend/todo/src/views/RegisterView.vue"],"sourcesContent":["<template>\n  <v-container fluid>\n    <v-row>\n      <v-col>\n        <v-responsive class=\"mx-auto\" max-width=\"350\">\n          <v-card\n            style=\"\n              backdrop-filter: blur(10px);\n              background-color: rgba(255, 255, 255, 0.2);\n              box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n              border-radius: 10px;\n            \"\n            :loading=\"requestLoading\"\n            class=\"pa-4 mt-4 mx-auto\"\n            title=\"User Registration\"\n            variant=\"outlined\"\n          >\n            <v-form v-model=\"isValid\">\n              <v-text-field\n                hide-details=\"auto\"\n                label=\"Username\"\n                placeholder=\"Linus\"\n                prepend-icon=\"mdi-account\"\n                variant=\"underlined\"\n                v-model=\"username\"\n                counter=\"20\"\n                validate-on=\"input\"\n                required\n                :rules=\"[\n                  usernameRules.required,\n                  usernameRules.minLength,\n                  usernameRules.whiteSpace,\n                  usernameRules.nonWord,\n                  usernameRules.maxLength,\n                ]\"\n              ></v-text-field>\n              <v-text-field\n                hide-details=\"auto\"\n                label=\"Password\"\n                placeholder=\"qwerty\"\n                prepend-icon=\"mdi-lock\"\n                variant=\"underlined\"\n                v-model=\"password\"\n                :type=\"showPassword ? 'text' : 'password'\"\n                required\n                :rules=\"[\n                  passwordRules.required,\n                  passwordRules.maxLength,\n                  passwordRules.minLength,\n                  passwordRules.numberRequired,\n                  passwordRules.whiteSpace,\n                  passwordRules.upperCase,\n                  passwordRules.lowerCase,\n                  passwordRules.nonWord,\n                ]\"\n              >\n                <template v-slot:append>\n                  <v-icon\n                    :icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-off'\"\n                    @click=\"showPassword = !showPassword\"\n                  ></v-icon>\n                </template>\n              </v-text-field>\n              <v-card color=\"surface-variant\" variant=\"tonal\" class=\"mt-6\">\n                <v-card-text class=\"text-medium-emphasis text-caption\">\n                  {{ rulesDescription }}\n                </v-card-text>\n              </v-card>\n              <v-btn\n                :disabled=\"!isValid\"\n                @click=\"register\"\n                color=\"info\"\n                class=\"mt-4\"\n                size=\"large\"\n                type=\"submit\"\n                block\n              >\n                sign-in\n              </v-btn>\n            </v-form>\n          </v-card>\n        </v-responsive>\n      </v-col>\n    </v-row>\n  </v-container>\n</template>\n<script>\nimport axios from \"axios\";\n\nexport default {\n  name: \"RegisterView\",\n  data() {\n    return {\n      // Constant variables:\n      REGISTER_URL: \"http://192.168.1.115:8000/auth/register/\",\n      // Dynamic vaiables:\n      showPassword: false,\n      requestLoading: false,\n      username: \"\",\n      password: \"\",\n      isValid: true,\n      // The rules for username, search pattern in RegExp:\n      usernameRules: {\n        required: (value) => !!value || \"Please, fill the field!\",\n        minLength: (value) =>\n          value.length >= 4 || \"Minimal length of username is 4\",\n        whiteSpace: (value) =>\n          !/\\s/.test(value) || \"The username must be without withespace!\",\n        maxLength: (value) =>\n          value.length <= 20 || \"Maximal length of username is 20\",\n        nonWord: (value) =>\n          !/[^a-zA-Z0-9_]/.test(value) ||\n          \"The username must be in Latin letters!\",\n      },\n      // The rules for password, search patter in RegExp:\n      passwordRules: {\n        required: (value) => !!value || \"Please, fill the field!\",\n        maxLength: (value) =>\n          value.length <= 15 || \"Maximal length of password is 15\",\n        minLength: (value) =>\n          value.length >= 4 || \"Minimal length of username is 4\",\n        numberRequired: (value) =>\n          /\\d/.test(value) || \"Password must contain at least one number\",\n        whiteSpace: (value) =>\n          !/\\s/.test(value) || \"The password must be without withespace!\",\n        upperCase: (value) =>\n          /[A-Z]/.test(value) ||\n          \"The password must contain at least one Upper case!\",\n        lowerCase: (value) =>\n          /[a-z]/.test(value) ||\n          \"The password must contain at least one lower case!\",\n        nonWord: (value) =>\n          !/[^a-zA-Z0-9_]/.test(value) ||\n          \"The password must be in Latin letters!\",\n      },\n      // The username and password creation tips:\n      rulesDescription:\n        \"When you create an account use these standarts to make strong\\\n        username and secure password: number in password, at least one\\\n        upper case letter, at least one lower case letter, no whitespace,\\\n        min length of password must be greater than 4, max length of password\\\n        must be lower than 20, the letters of password must be in Latin.\",\n    };\n  },\n  methods: {\n    // The authentication method that makes post request call to register new user;\n    register() {\n      // Checking if the rules of username and password fields are correct, if correct allow make request\n      if (this.isValid == true) {\n        this.requestLoading = true;\n        try {\n          // Try make post reqeust to REGISTER_URL for user registration\n          axios\n            .post(this.REGISTER_URL, {\n              username: this.username,\n              password: this.password,\n            })\n            .then((response) => {\n              // Handling the response of API call\n              // If response status code is equal to 201(200) redirect to login page\n              if (response.status == 201 || response.status == 200) {\n                this.requestLoading = false;\n                // redirect the user to the login page\n                this.$router.push(\"/login\");\n              }\n              // If response status code is equal to 226\n              // Show logs that this user already has been registered\n              // Show link of login page in alert dialog\n              if (response.status == 226) {\n                this.requestLoading = false;\n                console.log(response.status);\n              }\n              // If response status code is equal to 400\n              // show logs with that error\n              if (response.status == 400) {\n                this.requestLoading = false;\n                console.log(response.status);\n              }\n            });\n          this.requestLoading = !this.requestLoading;\n        } catch (err) {\n          // In all other cases show alert dialog with err\n          alert(err);\n        }\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}